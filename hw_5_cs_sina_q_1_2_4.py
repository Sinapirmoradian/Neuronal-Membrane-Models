# -*- coding: utf-8 -*-
"""HW_5_CS_Sina_Q_1_2_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XkxD8XPPmcbEYUeEDOttdWwTtEgEc0p_
"""

from google.colab import drive
drive.mount ('/content/drive')

# Assuming your files are located in the following paths:
models_path = '/content/drive/MyDrive/HW_5_CS/models.py'


# Import the files
import sys
sys.path.append('/content/drive/MyDrive/HW_5_CS')

# Now you can import your models and utils as if they were in the Colab environment
import  models

import os
import shutil
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from scipy.integrate import solve_ivp

from models import *




save_figures = True
save_dir = './Report/figs'
questions_number = '1_2_4'
if save_figures:
    if not os.path.exists(save_dir):
        os.makedirs(save_dir, exist_ok=True)

MIN_STEP_THRESHOLD = 2.3
MIN_IMPULSE_THRESHOLD = 15.0

model = HodgkinHuxleyModel()

t_start = 0
t_end = 50
dt = 0.01
t = np.arange(t_start, t_end, dt)

k = 0

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))

current_amplitudes = np.linspace(0, MIN_STEP_THRESHOLD, 7, endpoint=False)[1:]
alpha_values = np.linspace(0.2, 1, len(current_amplitudes))

for i, (I, alpha) in enumerate(zip(current_amplitudes, alpha_values)):
    input_current = lambda t: I if (t>=5) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t), alpha=alpha, color='C0')
    ax[0,1].plot(sol.t, V, alpha=alpha, color='C0')
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$' if i==5 else None, alpha=alpha, color='C0')
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$' if i==5 else None, alpha=alpha, color='C1')
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$' if i==5 else None, alpha=alpha, color='C2')
    ax[1,1].plot(sol.t, n, label='$n$' if i==5 else None, alpha=alpha, color='C0')
    ax[1,1].plot(sol.t, m, label='$m$' if i==5 else None, alpha=alpha, color='C1')
    ax[1,1].plot(sol.t, h, label='$h$' if i==5 else None, alpha=alpha, color='C2')
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle(f'Hodgkin-Huxley Model Subthreshold Step Response')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
    k += 1

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))

current_amplitudes = np.linspace(0, MIN_IMPULSE_THRESHOLD, 7, endpoint=False)[1:]
alpha_values = np.linspace(0.2, 1, len(current_amplitudes))

for i, (I, alpha) in enumerate(zip(current_amplitudes, alpha_values)):
    input_current = lambda t: I if (t>=5 and t<=5.5) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t), alpha=alpha, color='C0')
    ax[0,1].plot(sol.t, V, alpha=alpha, color='C0')
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$' if i==5 else None, alpha=alpha, color='C0')
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$' if i==5 else None, alpha=alpha, color='C1')
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$' if i==5 else None, alpha=alpha, color='C2')
    ax[1,1].plot(sol.t, n, label='$n$' if i==5 else None, alpha=alpha, color='C0')
    ax[1,1].plot(sol.t, m, label='$m$' if i==5 else None, alpha=alpha, color='C1')
    ax[1,1].plot(sol.t, h, label='$h$' if i==5 else None, alpha=alpha, color='C2')
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle(f'Hodgkin-Huxley Model Subthreshold Impulse Response')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
    k += 1

plt.show()