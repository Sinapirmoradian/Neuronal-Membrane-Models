# -*- coding: utf-8 -*-
"""HW_5_CS_Sina_Q_1_2_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aGIgvmpSB2JeCbVtHRpTbZAduVZwX6U7
"""

from google.colab import drive
drive.mount ('/content/drive')

# Assuming your files are located in the following paths:
models_path = '/content/drive/MyDrive/HW_5_CS/models.py'
utils_path = '/content/drive/MyDrive/HW_5_CS/utils.py'

# Import the files
import sys
sys.path.append('/content/drive/MyDrive/HW_5_CS')

# Now you can import your models and utils as if they were in the Colab environment
import  models

import os
import shutil
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks
from scipy.integrate import solve_ivp

from models import *
from utils import *


save_figures = True
save_dir = './Report/figs'
questions_number = '1_2_1'
if save_figures:
    if not os.path.exists(save_dir):
        os.makedirs(save_dir, exist_ok=True)

"""Part_1"""

model = HodgkinHuxleyModel()

t_start = 0
t_end = 100
dt = 0.01
t = np.arange(t_start, t_end, dt)

input_current = lambda t: 20 if (t>=20 and t<=20.5) else 0.0

sol = solve_ivp(
    lambda t, Y: model(Y, I=input_current(t)),
    t_span=[t_start, t_end],
    y0=model.get_initial_state(),
    t_eval=t,
    vectorized=True,
    method = 'RK23',
)

V, n, m, h = sol.y
I_Na, I_K, I_L = model.get_currents(*sol.y)

k = 0

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
ax[0,0].set_ylim([-2,32])
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].plot(sol.t, V)
ax[0,1].set_ylim([-90,50])
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].plot(sol.t, n, label='$n$')
ax[1,1].plot(sol.t, m, label='$m$')
ax[1,1].plot(sol.t, h, label='$h$')
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle('Hodgkin-Huxley Model Impulse Response')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
    k += 1

input_current = lambda t: 20 if (t>=20) else 0.0

sol = solve_ivp(
    lambda t, Y: model(Y, I=input_current(t)),
    t_span=[t_start, t_end],
    y0=model.get_initial_state(),
    t_eval=t,
    vectorized=True,
    method = 'RK23',
)

V, n, m, h = sol.y
I_Na, I_K, I_L = model.get_currents(*sol.y)

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
ax[0,0].set_ylim([-2,32])
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].plot(sol.t, V)
ax[0,1].set_ylim([-90,50])
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].plot(sol.t, n, label='$n$')
ax[1,1].plot(sol.t, m, label='$m$')
ax[1,1].plot(sol.t, h, label='$h$')
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle('Hodgkin-Huxley Model Step Response')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
    k += 1

for I in np.arange(1, 20, 0.1):
    input_current = lambda t: I if (t>=20) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    if np.any(V >= 0):

        minimum_step_current = I

        print(colorize_text(f'The minimum amplitude for a step current to elicit an AP is {minimum_step_current:.1f} uA/cm^-2', 'yellow'))

        fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
        ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
        ax[0,0].set_ylim([-2,32])
        ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[0,0].set_title('Input Current')
        ax[0,0].grid()
        ax[0,1].plot(sol.t, V)
        ax[0,1].set_ylim([-90,50])
        ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
        ax[0,1].set_title('Membrane Voltage')
        ax[0,1].grid()
        ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
        ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
        ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
        ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[1,0].set_title('Ion and leak currents')
        ax[1,0].legend(loc='lower right')
        ax[1,0].grid()
        ax[1,1].plot(sol.t, n, label='$n$')
        ax[1,1].plot(sol.t, m, label='$m$')
        ax[1,1].plot(sol.t, h, label='$h$')
        ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,1].set_title('Gating Variables')
        ax[1,1].legend(loc='lower right')
        ax[1,1].grid()
        fig.suptitle(f'Hodgkin-Huxley Model Step Response to $I(t)={minimum_step_current:.1f}u(t)$ which is the minimum current to elicit an AP')
        plt.tight_layout()
        if save_figures:
            plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
            k += 1

        break

t_start = 0
t_end = 1000
dt = 0.01
t = np.arange(t_start, t_end, dt)

for I in np.arange(minimum_step_current+3.5, minimum_step_current+5, 0.01):
    input_current = lambda t: I if (t>=20) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    peak_indices, _ = find_peaks(V, height=-30)

    if not len(peak_indices) > 10:
        continue
    else:

        minimum_step_current_for_tonic_behavior = I

        print(colorize_text(f'The minimum amplitude for a step current to elicit a tonic behavior is {minimum_step_current_for_tonic_behavior:.2f} uA/cm^-2', 'magenta'))

        fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
        ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
        ax[0,0].set_ylim([-2,32])
        ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[0,0].set_title('Input Current')
        ax[0,0].grid()
        ax[0,1].plot(sol.t, V)
        ax[0,1].set_ylim([-90,50])
        ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
        ax[0,1].set_title('Membrane Voltage')
        ax[0,1].grid()
        ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
        ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
        ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
        ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[1,0].set_title('Ion and leak currents')
        ax[1,0].legend(loc='lower right')
        ax[1,0].grid()
        ax[1,1].plot(sol.t, n, label='$n$')
        ax[1,1].plot(sol.t, m, label='$m$')
        ax[1,1].plot(sol.t, h, label='$h$')
        ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,1].set_title('Gating Variables')
        ax[1,1].legend(loc='lower right')
        ax[1,1].grid()
        fig.suptitle(f'Hodgkin-Huxley Model Step Response to $I(t)={minimum_step_current_for_tonic_behavior:.2f}u(t)$ which is the minimum current to elicit tonic behavior')
        plt.tight_layout()
        if save_figures:
            plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
            k += 1

        break

t_start = 0
t_end = 100
dt = 0.01
t = np.arange(t_start, t_end, dt)

for I in np.arange(5, 50, 5):
    input_current = lambda t: I if (t>=20 and t<=20.5) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    if np.any(V >= 0):

        minimum_impulse_current = I

        print(colorize_text(f'The minimum amplitude for an impulse current to elicit an AP is {minimum_impulse_current:.1f} uA/cm^-2', 'green'))

        fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
        ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
        ax[0,0].set_ylim([-2,32])
        ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[0,0].set_title('Input Current')
        ax[0,0].grid()
        ax[0,1].plot(sol.t, V)
        ax[0,1].set_ylim([-90,50])
        ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
        ax[0,1].set_title('Membrane Voltage')
        ax[0,1].grid()
        ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
        ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
        ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
        ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
        ax[1,0].set_title('Ion and leak currents')
        ax[1,0].legend(loc='lower right')
        ax[1,0].grid()
        ax[1,1].plot(sol.t, n, label='$n$')
        ax[1,1].plot(sol.t, m, label='$m$')
        ax[1,1].plot(sol.t, h, label='$h$')
        ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
        ax[1,1].set_title('Gating Variables')
        ax[1,1].legend(loc='lower right')
        ax[1,1].grid()
        fig.suptitle(f'Hodgkin-Huxley Model Impulse Response to $I(t)={minimum_impulse_current:.2f}(u(t)-u(t-0.5))$ which is the minimum current to elicit an AP')
        plt.tight_layout()
        if save_figures:
            plt.savefig(f'{save_dir}/{questions_number}_1_{k}.png')
            k += 1

        break

"""Part_2"""

t_start = 0
t_end = 20
dt = 0.01
t = np.arange(t_start, t_end, dt)

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))

k = 0

current_amplitudes = np.arange(2, 30, 5)
alpha_values = np.linspace(0.2, 1, len(current_amplitudes))

for i, (alpha, I) in enumerate(zip(alpha_values, current_amplitudes)):
    input_current = lambda t: I if (t>=10) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t), color='C0', alpha=alpha)
    ax[0,1].plot(sol.t, V, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$' if i==len(current_amplitudes)-1 else None, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$' if i==len(current_amplitudes)-1 else None, color='C1', alpha=alpha)
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$' if i==len(current_amplitudes)-1 else None, color='C2', alpha=alpha)
    ax[1,1].plot(sol.t, n, label='$n$' if i==len(current_amplitudes)-1 else None, color='C0', alpha=alpha)
    ax[1,1].plot(sol.t, m, label='$m$' if i==len(current_amplitudes)-1 else None, color='C1', alpha=alpha)
    ax[1,1].plot(sol.t, h, label='$h$' if i==len(current_amplitudes)-1 else None, color='C2', alpha=alpha)
ax[0,0].set_ylim([-2,32])
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].set_ylim([-90,50])
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle(f'Hodgkin-Huxley Model Step Response to different amplitudes')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_2_{k}.png')
    k += 1

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))

current_amplitudes = np.arange(5, 30, 5)
alpha_values = np.linspace(0.2, 1, len(current_amplitudes))

for i, (alpha, I) in enumerate(zip(alpha_values, current_amplitudes)):
    input_current = lambda t: I if (t>=10 and t<=10.5) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t), color='C0', alpha=alpha)
    ax[0,1].plot(sol.t, V, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$' if i==len(current_amplitudes)-1 else None, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$' if i==len(current_amplitudes)-1 else None, color='C1', alpha=alpha)
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$' if i==len(current_amplitudes)-1 else None, color='C2', alpha=alpha)
    ax[1,1].plot(sol.t, n, label='$n$' if i==len(current_amplitudes)-1 else None, color='C0', alpha=alpha)
    ax[1,1].plot(sol.t, m, label='$m$' if i==len(current_amplitudes)-1 else None, color='C1', alpha=alpha)
    ax[1,1].plot(sol.t, h, label='$h$' if i==len(current_amplitudes)-1 else None, color='C2', alpha=alpha)
ax[0,0].set_ylim([-2,32])
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].set_ylim([-90,50])
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle(f'Hodgkin-Huxley Model Impulse Response to different amplitudes')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_2_{k}.png')
    k += 1

fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))

durations = np.arange(0.1, 2, 0.3)
alpha_values = np.linspace(0.2, 1, len(durations))

for i, (alpha, delta_t) in enumerate(zip(alpha_values, durations)):
    input_current = lambda t: 10 if (t>=10 and t<=10 + delta_t) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t), color='C0', alpha=alpha)
    ax[0,1].plot(sol.t, V, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$' if i==len(durations)-1 else None, color='C0', alpha=alpha)
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$' if i==len(durations)-1 else None, color='C1', alpha=alpha)
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$' if i==len(durations)-1 else None, color='C2', alpha=alpha)
    ax[1,1].plot(sol.t, n, label='$n$' if i==len(durations)-1 else None, color='C0', alpha=alpha)
    ax[1,1].plot(sol.t, m, label='$m$' if i==len(durations)-1 else None, color='C1', alpha=alpha)
    ax[1,1].plot(sol.t, h, label='$h$' if i==len(durations)-1 else None, color='C2', alpha=alpha)
ax[0,0].set_ylim([-2,32])
ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[0,0].set_title('Input Current')
ax[0,0].grid()
ax[0,1].set_ylim([-90,50])
ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
ax[0,1].set_title('Membrane Voltage')
ax[0,1].grid()
ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
ax[1,0].set_title('Ion and leak currents')
ax[1,0].legend(loc='lower right')
ax[1,0].grid()
ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
ax[1,1].set_title('Gating Variables')
ax[1,1].legend(loc='lower right')
ax[1,1].grid()
fig.suptitle(f'Hodgkin-Huxley Model Impulse Response to different amplitudes')
plt.tight_layout()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_2_{k}.png')
    k += 1

current_amplitudes = np.concatenate([
    np.arange(minimum_step_current, minimum_step_current_for_tonic_behavior, 0.5),
    [minimum_step_current_for_tonic_behavior-0.01,],
    np.arange(minimum_step_current_for_tonic_behavior, minimum_step_current_for_tonic_behavior+2, 0.1),
    np.arange(minimum_step_current_for_tonic_behavior+2, minimum_step_current_for_tonic_behavior+10, 1),
])
firing_frequencies = np.zeros_like(current_amplitudes)

t_start = 0
t_end = 250
dt = 0.01
t = np.arange(t_start, t_end, dt)

for i, I in enumerate(current_amplitudes):
    input_current = lambda t: I if (t>=20) else 0.0

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y

    peak_indices, _ = find_peaks(V, height=-30)

    if not len(peak_indices) > 10:
        firing_frequencies[i] = 0
        continue

    peak_times = t[peak_indices]
    peak_voltage = t[peak_indices]

    firing_frequency = 1 / np.diff(peak_times).mean()

    firing_frequencies[i] = firing_frequency

fig = plt.figure()
plt.plot(current_amplitudes, firing_frequencies, label='$f(I)$')
plt.axvline(x=minimum_step_current, color='r', linestyle='--', label='$I_\mathrm{min,\;step}$')
plt.axvline(x=minimum_step_current_for_tonic_behavior, color='g', linestyle='--', label='$I_\mathrm{min,\;tonic}$')
plt.xlabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
plt.ylabel('$f\;[k\mathrm{Hx}]$')
plt.title('Frequency of the tonic behavior and amplitude of the stimulation')
plt.legend(loc='lower right')
plt.grid()
if save_figures:
    plt.savefig(f'{save_dir}/{questions_number}_2_{k}.png')
    k += 1

"""Part_3"""

t_start = 0
t_end = 100
dt = 0.01
t = np.arange(t_start, t_end, dt)

input_current = lambda t: 20 if (t>=20) else 0.0

initial_states = [
    {'V0': -10},
    {'V0': 30},
    {'n0': 0.6},
    {'n0': 1},
    {'m0': 0.5},
    {'m0': 1},
    {'h0': 0.1},
    {'h0': 1},
]

k = 0

for initial_state in initial_states:
    model.set_initial_state(**initial_state)
    initial_state = model.get_initial_state()

    sol = solve_ivp(
        lambda t, Y: model(Y, I=input_current(t)),
        t_span=[t_start, t_end],
        y0=model.get_initial_state(),
        t_eval=t,
        vectorized=True,
        method = 'RK23',
    )

    V, n, m, h = sol.y
    I_Na, I_K, I_L = model.get_currents(*sol.y)

    fig, ax = plt.subplots(nrows=2, ncols=2, sharex=True, figsize=(12.8, 4.8))
    ax[0,0].plot(sol.t, np.vectorize(input_current)(sol.t))
    ax[0,0].set_ylim([-2,32])
    ax[0,0].set_xlabel('$t\;[m\mathrm{s}]$')
    ax[0,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
    ax[0,0].set_title('Input Current')
    ax[0,0].grid()
    ax[0,1].plot(sol.t, V)
    ax[0,1].set_ylim([-90,50])
    ax[0,1].set_xlabel('$t\;[m\mathrm{s}]$')
    ax[0,1].set_ylabel('$V\;[m\mathrm{V}]$')
    ax[0,1].set_title('Membrane Voltage')
    ax[0,1].grid()
    ax[1,0].plot(sol.t, I_Na, label='$I_\mathrm{Na}$')
    ax[1,0].plot(sol.t, I_K, label='$I_\mathrm{K}$')
    ax[1,0].plot(sol.t, I_L, label='$I_\mathrm{L}$')
    ax[1,0].set_xlabel('$t\;[m\mathrm{s}]$')
    ax[1,0].set_ylabel('$I\;[\mu\mathrm{A}/c\mathrm{m}^2]$')
    ax[1,0].set_title('Ion and leak currents')
    ax[1,0].legend(loc='lower right')
    ax[1,0].grid()
    ax[1,1].plot(sol.t, n, label='$n$')
    ax[1,1].plot(sol.t, m, label='$m$')
    ax[1,1].plot(sol.t, h, label='$h$')
    ax[1,1].set_xlabel('$t\;[m\mathrm{s}]$')
    ax[1,1].set_title('Gating Variables')
    ax[1,1].legend(loc='lower right')
    ax[1,1].grid()
    fig.suptitle(f'Hodgkin-Huxley Model Step Response with $V_0={initial_state[0]}\;n_0={initial_state[1]}\;m_0={initial_state[2]}\;h_0={initial_state[3]}$')
    plt.tight_layout()
    if save_figures:
        plt.savefig(f'{save_dir}/{questions_number}_3_{k}.png')
        k += 1

plt.show()